DS Programs
                                                                          Extra Assignment
1.Write a Program to demonstrate simple array.
#include<iostream.h>
#include<conio.h>
void main()
{
int arr[5];
int i;
cout<<"Enter the number:"<<endl;
for (i=0;i<5;i++)
{
	cin>>arr[i];
}
cout<<"The Array of element:"<<endl;
for (i=0;i<5;i++)
{
	cout<<arr[i];
}
getch();
clrscr();
}
Output:-
Enter the number:
5
4
5
6
7
The Array of elements:54567

2.Write a Program to demonstrate print array (User input).
3.Write a Program to traverse in to array.
#include <iostream>

using namespace std;

// function for Array Traversal

void display(int arr[] , int n) {
    for(int i = 0; i < n; i++) {
        cout<<arr[i]<<"\t";
    }
    cout<<"\n";
}


// function for Array Insertion

int Insertion(int arr[] , int n , int capacity , int element , int ind) {
    
    if(n >= capacity) {
        return -1;
    }
    for(int i = n; i >= ind; i--) {
       arr[i+1] = arr[i];
    }
    arr[ind] = element;
    cout<<"\n";
    return 0;
}



int main() {
    
    int arr[10] = {1 , 2 , 3 , 4 , 5};
    int n = 5;
    
    display(arr , n);
    
    Insertion(arr, n , 10 , 58 , 1);
    
     display(arr , n+1);
    
    return 0;
}
4.Write a Program to delete element from array.

5.Write a Program to updation of array.
6. Write a Program to searching element in array using Index.
7. Write a Program to searching  index using element.
8. Write a Program to sort a array in ascending/descending order.
9. Write a Program for Insertion sort.
#include<iostream.h>
#include<conio.h>
void main()
{
int i,j,temp,n;
int a[50];
cout<<"Enter the array size:-" ;
cin>>n;
cout<<"Enter the array element:-"<<endl;
for(i=0;i<n;i++)
{
cin>>a[i];
}
cout<<"Element before sorting:-"<<endl;
for(i=0;i<n;i++)
{
cout<<a[i]<<endl;
}
for(i=1;i<n;i++)
{
temp=a[i];
j=i-1;
while(j>=0 && a[j]>temp)
{
a[j+1]=a[j];
j--;
}
a[j+1]=temp;
}
cout<<"Element after sorting:-"<<endl;
for(i=0;i<n;i++)
{
cout<<a[i]<<endl;
}
getch();
clrscr();
}
Output:-
Enter the array size:-
4
Enter the array element:-
6
13
32
14
Element before sorting:-
6
13
32
14
Element after sorting:-
6
13
14
32.
10. Write a Program   for selection sort.
#include<iostream.h>
#include<conio.h>
void main()
{
int i,j,n;
int a[50];
cout<<"Enter the size:";
cin>>n;
cout<<"Enter the element:";
for(i=0;i<n;i++)
{
cin>>a[i];
}
cout<<"Array before sorting:";
for(i=0;i<n;i++)
{
cout<<a[i]<<endl;
}
for(i=0;i<n-1;i++)
{
int min=i;
for(j=i+1;j<n;j++)
{
if(a[j]<a[min])
{
min=j;
}
}
if(min!=i)
{
int temp=a[i];
a[i]=a[min];
a[min]=temp;
}
}
cout<<"sorted Array is:";
for(i=0;i<n;i++)
{
cout<<a[i]<<endl;
}
getch();
clrscr();
}
Output: -
Enter the size:
7
Enter the element:
9
5
7
10
34
12
13
Array before sorting:9
5
7
10
34
12
13
Sorted Array is: 5
7
9
10
12
13
34
11. Write a Program for Merge sort.

12. Write a Program for Quick sort.
#include<iostream.h>
#include<conio.h>
void swap(int *a,int *b)
{
int t=*a;
*a=*b;
*b=t;
}
int partition(int arr[],int low,int high)
{
int pivot=arr[high];
int i=(low-1);
for(int j=low;j<=high-1;j++)
{
if(arr[j]<pivot)
{
i++;
swap(&arr[i],&arr[j]);
}
}
swap(&arr[i+1],&arr[j]);
return(i+1);
}
void quicksort(int arr[],int low,int high)
{
if(low<high)
{
int pi=partition(arr,low,high);
quicksort(arr,low,pi-1);
quicksort(arr,pi+1,high);
}
}
void main()
{
int a[10],n,i,j;
cout<<"enter size of array :"<<endl;
cin>>n;
cout<<"Enter the array Elements :"<<endl;
for(i=0;i<n;i++)
{
cin>>a[i];
}
quicksort(a,0,n-1);
cout<<"Array after sorting"<<endl;
for(i=0;i<n;i++)
{
cout<<a[i]<<" "<<endl;
}
getch();
clrscr();
}

13. Write a Program for doubly link list.
#include < iostream >
using namespace std;
struct Node {
   int data;
   struct Node *prev;
   struct Node *next;
};
struct Node* head = NULL;
void insert(int newdata) {
   struct Node* newnode = (struct Node*) malloc(sizeof(struct Node));
   newnode->data = newdata;
   newnode->prev = NULL;
   newnode->next = head;
   if(head != NULL)
   head->prev = newnode ;
   head = newnode;
}
void display() {
   struct Node* ptr;
   ptr = head;
   while(ptr != NULL) {
      cout<< ptr->data <<" ";
      ptr = ptr->next;
   }
}
int main() {
   insert(3);
   insert(1);
   insert(7);
   insert(2);
   insert(9);
   cout<<"The doubly linked list is: ";
   display();
   return 0;
}
output
The doubly linked list is: 9 2 7 1 3

14. Write a Program for doubly link list.
#include <iostream>
using namespace std;
struct Node {
   int data;
   struct Node *next;
};
struct Node* head = NULL;
void insert(int newdata) {
   struct Node *newnode = (struct Node *)malloc(sizeof(struct Node));
   struct Node *ptr = head;
   newnode->data = newdata;
   newnode->next = head;
   if (head!= NULL) {
      while (ptr->next != head)
      ptr = ptr->next;
      ptr->next = newnode;
   } else
   newnode->next = newnode;
   head = newnode;
}
void display() {
   struct Node* ptr;
   ptr = head;
   do {
      cout<<ptr->data <<" ";
      ptr = ptr->next;
   } while(ptr != head);
}
int main() {
   insert(3);
   insert(1);
   insert(7);
   insert(2);
   insert(9);
   cout<<"The circular linked list is: ";
   display();
   return 0;
}
Output
The circular linked list is: 9 2 7 1 3

15. Write a Program simple tree.
16. Write a Program binary tree.

                                             Actual Assignment
17.Matrix.



#include <iostream> 
using namespace std; 
int main()
{
int a[10][10],b[10][10],mul[10][10],r,c,i,j,k;
cout<<"enter the number of row="; cin>>r;
cout<<"enter the number of column="; cin>>c;
cout<<"enter the first matrix element=\n";
for(i=0;i<r;i++)
{
for(j=0;j<c;j++)
{
cin>>a[i][j];
}
}
cout<<"enter the second matrix element=\n";
for(i=0;i<r;i++)
{
for(j=0;j<c;j++)
{
cin>>b[i][j];
}
}
cout<<"multiply of the matrix=\n";
for(i=0;i<r;i++)
{
for(j=0;j<c;j++)
{
mul[i][j]=0;
for(k=0;k<c;k++)
{
mul[i][j]+=a[i][k]*b[k][j];
}
}
}
//for printing result
for(i=0;i<r;i++)
{
for(j=0;j<c;j++)
{
cout<<mul[i][j]<<" ";
}
cout<<"\n";
}
return 0;
}

Output:

enter the number of row=3
 enter the number of column=3 
enter the first matrix element=
 
1 2 3
1 2 3
1 2 3
enter the second matrix element= 1 1 1
2 1 2
3 2 1
multiply of the matrix= 14 9 8
14 9 8
14 9 8


18.Stack. 
#include <iostream.h>
#include <conio.h>
int n = 5;
int stack[5];
int top = -1;
void push() {
int x;
cout<<"\n Enter Data : ";
cin>>x;
if(top == n - 1) {
cout<<"Stack is Overflow";
}
else {

top++;
stack[top] = x;

}

}
void pop() {

if(top == -1) {

cout<<"Stack Is Underflow";

}
else {
top--;
}
}
void peek() 
{
if(top == -1)
 {
cout<<"Stack Is Empty";
}
else {
cout<<stack[top];
}
}
void display() {
for(int i = top; i >= 0; i-- ) {
cout<<stack[i]<<"\t";
}
}
void main()
 {
int choice;
do {
cout<<"\n Enter Your Choice - 1 : push() , 2 : pop() , 3 : peek() , 4 : display() ";
cin>>choice;
switch(choice) {
case 1 : push();
break;
case 2 : pop();
break;
case 3 : peek();
break;
case 4 : display();
break;
default : cout<<"Invalid";
}
    }
while(choice > 0);
getch();
clrscr();
}
19.Queue.
#include <iostream.h>
#include <conio.h>

int queue[5];
int front = -1;
int rear = -1;
int n = 5;

void enqueue() {

int x;
cout<<"Enter a Data : ";
cin>>x;

if(rear == n - 1) {

cout<<"Queue is Overflow";

}
else if(front == -1 && rear == -1) {

front = rear = 0;
queue[rear] = x;

}

else {

rear++;

queue[rear] = x;

}
}

void dequeue() {

if(front == -1 && rear == -1) {

cout<<"Queue is Underflow";

}
else if(front == rear){

front = rear = -1;

}
else {

front++;
cout<<queue[front];
}

}

void peek() {

if(front == -1 && rear == -1) {

cout<<"Queue is Empty";

}
else {

cout<<queue[front];

}

}


void display() {

for(int i = front; i < rear+1; i++) {

cout<<queue[i]<<"\t";
}

}

void main() {

int choice;

do {

cout<<"\n Enter Your Choice - 1 : Enqueue , 2 : Dequeue , 3 : Peek , 4 : Display \n";
cin>>choice;

switch(choice) {

case 1 : enqueue();
break;

case 2 : dequeue();
break;

case 3 : peek();
break;

case 4 : display();
break;

default : cout<<"Invalid";

}

}while(choice > 0);


getch();
clrscr();

}
20.Single Linked List.
#include <iostream>
using namespace std;
struct Node {
   int data;
   struct Node *next;
};
struct Node* head = NULL;
void insert(int new_data) {
   struct Node* new_node = (struct Node*) malloc(sizeof(struct Node));
   new_node->data = new_data;
   new_node->next = head;
   head = new_node;
}
void display() {
   struct Node* ptr;
   ptr = head;
   while (ptr != NULL) {
      cout<< ptr->data <<" ";
      ptr = ptr->next;
   }
}
int main() {
   insert(3);
   insert(1);
   insert(7);
   insert(2);
   insert(9);
   cout<<"The linked list is: ";
   display();
   return 0;
}
Output
The linked list is: 9 2 7 1 3


21.Bubble Sort.
#include<iostream.h>
#include<conio.h>
void main()
{
clrscr();
int n,i,j,temp;
int a[50];
cout<<"Enter the size of array:- ";
cin>>n;
cout<<"Enter the array elements:- "<<endl;
for(i=0;i<n;i++)
{
cin>>a[i];
cout<<endl;
}
cout<<"Elements before sort:- "<<endl;
for(i=0;i<n;i++)
{
cout<<a[i]<<endl;
}
cout<<endl;
for(i=0;i<n-1;i++)
{
for(j=0;j<n-1;j++)
{
if(a[j]>a[j+1])
{
temp=a[j];
a[j]=a[j+1];
a[j+1]=temp;
}
}
}
cout<<"Elements after sorting:- "<<endl;
for(i=0;i<n;i++)
{
cout<<a[i]<<endl;
}
getch();
}
22.Recursion.
#include<iostream>
using namespace std; 
int main()
{
int factorial(int);
int fact,value;
cout<<"Enter any number: "; cin>>value; fact=factorial(value);
cout<<"Factorial of a number is: "<<fact<<endl;
return 0;
}
int factorial(int n)
{
if(n<0)
return(-1); /*Wrong value*/
if(n==0)
return(1); /*Terminating condition*/
else
{
return(n*factorial(n-1));
}
}

Output:
Enter any number: 5
 Factorial of a number is: 120


23.Linear Search.
#include<iostream.h>
#include<conio.h>
void main(){

int arr[5],i,num,index;
cout<<"Enter the number"<<endl;

for(i=0;i<10;i++){
cin>>arr[i];
}
cout<<"Enter the to search : "<<endl;
cin>>num;

for(i=0;i<10;i++){
if(arr[i]==num){
index=i;
break;
}
}
cout<<num<<" is Found at Index No : "<<index;
cout<<endl;
getch();
clrscr();
}

24.Binary Search.
#include <iostream>

using namespace std;
int binarySearch(int arr2[] , int n , int d) {

int i = 0;

while(i <= n) {
int  mid = (i + n) / 2;

if(arr2[mid] ==  d) {

return mid;
}

else if(d > arr2[mid]) {
i = mid + 1;
}

else {
n = mid - 1;
}

}

return -1;
}


int main() {

int len;
int dele;
cout<<"Enter length of an Array : ";
cin>>len;

int arr[len];

for (int i = 0; i < len; i++) {
cout<<"Enter "<<i+1<<" Element : ";
cin>>arr[i];
}

for (int i = 0; i < len; i++) {
cout<<i+1<<" : "<<arr[i]<<endl;
}
for (int i = 0; i < len; i++) {
for (int j = i+1; j < len; j++) {
if(arr[i] > arr[j]) {
int temp = arr[i];
arr[i] = arr[j];
arr[j] = temp;
}
}
}

cout<<"Sorted"<<endl;

for (int i = 0; i < len; i++) {
cout<<i+1<<" : "<<arr[i]<<endl;
}

cout<<"Enter Element  to find in Array  : ";
cin>>dele;

int result = binarySearch(arr , len , dele);

if(result == -1) {
cout<<"Element Not Found !!!";
}
else {
cout<<dele<<" Found At Index : "<<result;
}

return 0;
}
25.Tower of Hanoi.
#include<iostream.h>
 #include<conio.h> 
using namespace std;
void TOH(int d, char t1, char t2, char t3)
{
if(d==1)
{
cout<<"\nShift top disk from tower"<<t1<<" to tower"<<t2; return;
}
TOH(d-1,t1,t3,t2);
cout<<"\nShift top disk from tower"<<t1<<" to tower"<<t2; TOH(d-1,t3,t2,t1);
}
int main()
{
int disk;
cout<<"Enter the number of disks:"; cin>>disk; if(disk<1)
cout<<"There are no disks to shift";
 
else
cout<<"There are "<<disk<<"disks in tower 1\n"; TOH(disk, '1','2','3');
cout<<"\n\n"<<disk<<"disks in tower 1 are shifted to tower 2"; getch();
return 0;
}
Output:


26.Adjancy matrix representation of graph.
#include<iostream> 
using namespace std;
int vertArr[20][20]; //the adjacency matrix initially 0 int count = 0;
void displayMatrix(int v) { int i, j;
for(i = 0; i < v; i++) { for(j = 0; j < v; j++) {
cout << vertArr[i][j] << " ";
}
cout << endl;
}
}
void add_edge(int u, int v) {	//function to add edge into the matrix vertArr[u][v] = 1;
vertArr[v][u] = 1;
}
main(int argc, char* argv[]) {
int v = 6;	//there are 6 vertices in the graph add_edge(0, 4);
add_edge(0, 3);
add_edge(1, 2);
add_edge(1, 4);
add_edge(1, 5);
add_edge(2, 3);
add_edge(2, 5);
add_edge(5, 3);
add_edge(5, 4); displayMatrix(v);
}
Output:
0 0 0 1 1 0
0 0 1 0 1 1
0 1 0 1 0 1
1 0 1 0 0 1
1 1 0 0 0 1
0 1 1 1 1 0

















